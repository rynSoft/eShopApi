// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using eShop.Persistence;

#nullable disable

namespace eShop.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20241101214150_migInitial")]
    partial class migInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "349eab65-a508-40e8-9470-4378351b0e56",
                            Name = "sistemadmin",
                            NormalizedName = "SISTEMADMIN"
                        },
                        new
                        {
                            Id = "93f15963-d79c-4df4-b231-4f530ada00c6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "80c08013-89a0-4eb7-bbc6-55e4257e9cc1",
                            Name = "depo",
                            NormalizedName = "DEPO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("eShop.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("eShop.Domain.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Eposta")
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("441ec584-2937-416d-8d90-9af9f114d62d"),
                            AccessFailedCount = 0,
                            Ad = "Hakan",
                            ConcurrencyStamp = "6fc65e08-2445-4706-82c3-022d5a6f39f6",
                            Email = "hakan@.com",
                            EmailConfirmed = false,
                            Eposta = "hakan@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "YILDIRIM",
                            TwoFactorEnabled = false,
                            UserName = "hakanyildirim"
                        },
                        new
                        {
                            Id = new Guid("8e2de0b0-90b4-49f5-9562-429d53d22616"),
                            AccessFailedCount = 0,
                            Ad = "Tolga",
                            ConcurrencyStamp = "16e0bf01-c1a8-4572-9863-357c22ea5bfe",
                            Email = "tolga@.com",
                            EmailConfirmed = true,
                            Eposta = "tolga@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Bagin",
                            TwoFactorEnabled = false,
                            UserName = "Tolga"
                        },
                        new
                        {
                            Id = new Guid("4ef493a9-0508-464f-8558-ea71535eef03"),
                            AccessFailedCount = 0,
                            Ad = "Salih",
                            ConcurrencyStamp = "03fdc75c-7b75-488f-982a-57c8f2c34516",
                            Email = "salih@.com",
                            EmailConfirmed = true,
                            Eposta = "salih@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Dürüs",
                            TwoFactorEnabled = false,
                            UserName = "Salih"
                        },
                        new
                        {
                            Id = new Guid("46bc1227-98fb-4022-aeae-4a9a767c95d6"),
                            AccessFailedCount = 0,
                            Ad = "Cagan",
                            ConcurrencyStamp = "0a248121-6b6e-4f5a-a179-d5200b978941",
                            Email = "cagan@.com",
                            EmailConfirmed = true,
                            Eposta = "cagan@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Turhan",
                            TwoFactorEnabled = false,
                            UserName = "cagan"
                        },
                        new
                        {
                            Id = new Guid("2ddbf7ea-6498-44b8-9bd7-b0c94b8ff0bd"),
                            AccessFailedCount = 0,
                            Ad = "eShop",
                            ConcurrencyStamp = "ae5bc797-c38d-41ad-9e2c-a401b55e4975",
                            Email = "eShop@sentytech.com",
                            EmailConfirmed = true,
                            Eposta = "eShop@sentytech.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "eShop",
                            TwoFactorEnabled = false,
                            UserName = "eShop"
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double?>("DecreaseQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NextWPRId")
                        .HasColumnType("integer");

                    b.Property<string>("PartyNumber")
                        .HasColumnType("text");

                    b.Property<double?>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("RemainQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("integer");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 212, DateTimeKind.Unspecified).AddTicks(9526), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "pi pi-fw pi-globe",
                            IsDeleted = false,
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 212, DateTimeKind.Unspecified).AddTicks(9568), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "fa fa-gavel",
                            IsDeleted = false,
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 212, DateTimeKind.Unspecified).AddTicks(9570), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "fa fa-balance-scale",
                            IsDeleted = false,
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 212, DateTimeKind.Unspecified).AddTicks(9573), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "pi pi-fw pi-id-card",
                            IsDeleted = false,
                            Label = "Tanımlar",
                            RouteLink = "/tanimlar"
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 212, DateTimeKind.Unspecified).AddTicks(9857), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(208), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Bandı"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(546), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Etiketleme"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(859), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Display Montajı"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(1159), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Programlama"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(2117), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Panelden Ayırma"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(2466), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Test"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(2781), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite Süreçler"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(3079), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite Onaylar"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(3365), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite Operasyonlar"
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(3747), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Depo Tanımları"
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(4046), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Hat Tanımları"
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(4342), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Makine Tanımları"
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(4641), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Vardiya Tanımları"
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(4940), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Oee Gösterim"
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(5236), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Vardiya - Hat Hedef Miktar Tanımları"
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(5520), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Mola Tanımları"
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(5841), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Tamamlanan Kalite Operasyonları"
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(6155), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama"
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(6491), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama Görüntüle"
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(6833), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama Kaydet"
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(7153), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama Sil"
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(7447), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kit Hazırlama"
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(7745), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kit Doğrulama"
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(8041), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Setup Verification"
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(8337), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Ayarlar"
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(8632), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Credential"
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(8914), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite"
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(9285), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Dashboard"
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(9583), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rol Görüntüle"
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 213, DateTimeKind.Unspecified).AddTicks(9881), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rol Kaydet"
                        },
                        new
                        {
                            Id = 32,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 214, DateTimeKind.Unspecified).AddTicks(178), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rol Sil"
                        },
                        new
                        {
                            Id = 33,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 214, DateTimeKind.Unspecified).AddTicks(476), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı Görüntüle"
                        },
                        new
                        {
                            Id = 34,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 214, DateTimeKind.Unspecified).AddTicks(776), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı Kaydet"
                        },
                        new
                        {
                            Id = 35,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 214, DateTimeKind.Unspecified).AddTicks(1060), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı Sil"
                        },
                        new
                        {
                            Id = 36,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 214, DateTimeKind.Unspecified).AddTicks(1405), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "KullaniciGrup All"
                        },
                        new
                        {
                            Id = 37,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 11, 2, 0, 41, 50, 214, DateTimeKind.Unspecified).AddTicks(1719), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "LogAll"
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<string>("BuyingPrice")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CustomsNr")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNr")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Length")
                        .HasColumnType("text");

                    b.Property<string>("NameDe")
                        .HasColumnType("text");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<string>("NameTR")
                        .HasColumnType("text");

                    b.Property<string>("OrjinalNr")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Weight")
                        .HasColumnType("text");

                    b.Property<string>("Width")
                        .HasColumnType("text");

                    b.Property<string>("Wieght")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("eShop.Domain.Auth.User", null)
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("eShop.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Domain.Entities.Menu", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("eShop.Domain.Entities.MenuPermission", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu");

                    b.HasOne("eShop.Domain.Entities.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Permission_MenuPermission");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("eShop.Domain.Auth.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });
#pragma warning restore 612, 618
        }
    }
}
