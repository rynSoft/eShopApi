// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using techiz.Persistence;

#nullable disable

namespace techiz.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20230212090111_mig33")]
    partial class mig33
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "c32693d2-5869-48bf-930f-c34c86f56096",
                            ConcurrencyStamp = "372074da-9c1f-4c2b-bdcd-d7a45b4342c2",
                            Name = "sistemadmin",
                            NormalizedName = "SİSTEMADMİN"
                        },
                        new
                        {
                            Id = "4c78856a-6e44-4d30-8a74-6bcad70a5c0f",
                            ConcurrencyStamp = "c1123138-d70e-4271-9c4a-7756aeef02f6",
                            Name = "admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = "667c736e-1e85-4de8-95c8-470b0e088dca",
                            ConcurrencyStamp = "54d676a6-e5e1-44a1-a03f-a48e4fdc0e8a",
                            Name = "depo",
                            NormalizedName = "DEPO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("techiz.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("techiz.Domain.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Eposta")
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("78577eee-fefd-416a-af39-08c721fbd92b"),
                            AccessFailedCount = 0,
                            Ad = "Hakan",
                            ConcurrencyStamp = "d792fe51-16a3-4f76-abae-f0f0fde0623a",
                            Email = "hakan@oxit.com",
                            EmailConfirmed = false,
                            Eposta = "hakan@oxit.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "YILDIRIM",
                            TwoFactorEnabled = false,
                            UserName = "hakanyildirim"
                        },
                        new
                        {
                            Id = new Guid("7bb16056-08ca-4eec-bc67-76b334596c58"),
                            AccessFailedCount = 0,
                            Ad = "Seref",
                            ConcurrencyStamp = "4f60414a-bd1f-413c-b9cd-32546a3eebac",
                            Email = "seref@oxit.com",
                            EmailConfirmed = false,
                            Eposta = "seref@oxit.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Bagin",
                            TwoFactorEnabled = false,
                            UserName = "Seref"
                        },
                        new
                        {
                            Id = new Guid("5eacf97b-6b75-4776-b08e-92fadc12fd9f"),
                            AccessFailedCount = 0,
                            Ad = "Hakki",
                            ConcurrencyStamp = "a603c5a3-e881-412d-b2d4-c395b919bc09",
                            Email = "hakki@oxit.com",
                            EmailConfirmed = false,
                            Eposta = "hakki@oxit.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Şimşek",
                            TwoFactorEnabled = false,
                            UserName = "Hakki"
                        },
                        new
                        {
                            Id = new Guid("e399b891-1991-4c2a-af34-fc3304fc335c"),
                            AccessFailedCount = 0,
                            Ad = "Tolga",
                            ConcurrencyStamp = "e64d40b3-d5f2-4b22-b0f1-c1c7d00a1dc4",
                            Email = "tolga@oxit.com",
                            EmailConfirmed = true,
                            Eposta = "tolga@oxit.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Bagin",
                            TwoFactorEnabled = false,
                            UserName = "Tolga"
                        });
                });

            modelBuilder.Entity("techiz.Domain.Entities.BomKitInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("IsKitPreperated")
                        .HasColumnType("integer");

                    b.Property<int>("IsKitProvided")
                        .HasColumnType("integer");

                    b.Property<bool>("IsProductionProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSetupVerification")
                        .HasColumnType("boolean");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("PartyNumber")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("RollerQuantity")
                        .HasColumnType("double precision");

                    b.Property<int?>("SetNo")
                        .HasColumnType("integer");

                    b.Property<string>("SoureProductPlace")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<int?>("WareHouseId")
                        .HasColumnType("integer");

                    b.Property<string>("WareHouseName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("BomKitInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BarcodeReaderId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LedNumber")
                        .HasColumnType("integer");

                    b.Property<int>("LineId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("integer");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 417, DateTimeKind.Unspecified).AddTicks(9530), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "pi pi-fw pi-globe",
                            IsDeleted = false,
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 417, DateTimeKind.Unspecified).AddTicks(9557), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "fa fa-gavel",
                            IsDeleted = false,
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 417, DateTimeKind.Unspecified).AddTicks(9559), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "fa fa-balance-scale",
                            IsDeleted = false,
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 417, DateTimeKind.Unspecified).AddTicks(9560), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "pi pi-fw pi-id-card",
                            IsDeleted = false,
                            Label = "Tanımlar",
                            RouteLink = "/tanimlar"
                        });
                });

            modelBuilder.Entity("techiz.Domain.Entities.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 417, DateTimeKind.Unspecified).AddTicks(9843), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 417, DateTimeKind.Unspecified).AddTicks(9972), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.Uretim.All"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(82), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.KitHazirlama.All"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(185), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.KitDogrulama.All"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(295), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.SetupVerification.All"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(398), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.Ayarlar.All"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(507), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.Credential.All"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(610), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Role.Goruntule"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(719), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Role.Kaydet"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(823), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Role.Sil"
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(930), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı.Goruntule"
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1033), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı.Kaydet"
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1135), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı.Sil"
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1244), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.KullaniciGrup.All"
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1346), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.Log.All"
                        });
                });

            modelBuilder.Entity("techiz.Domain.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("EstimatedTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UretimAdi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MachineId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionLog");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionMachineMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("State")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionMachineMatch");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeedlerData")
                        .HasColumnType("jsonb");

                    b.Property<int>("GecenSure")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OperationProcess")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<string>("QrCode")
                        .HasColumnType("text");

                    b.Property<int?>("SetupVerificationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("SetupVerificationId");

                    b.ToTable("ProductionOperations");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperationsTimeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LastTime")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionOperationsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProductionOperationsId");

                    b.ToTable("ProductionOperationsTimeLog");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionTimeProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("ElapsedTime")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionTimeStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RestCauseId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("RestCauseId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionTimeProcess");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<bool>("OpenState")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUserRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionUserRelation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Quality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NonConformanceCode")
                        .HasColumnType("text");

                    b.Property<double>("Piece")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductionCode")
                        .HasColumnType("text");

                    b.Property<int>("QualityType")
                        .HasColumnType("integer");

                    b.Property<string>("SerialCode")
                        .HasColumnType("text");

                    b.Property<string>("WorkOrderNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quality");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LotInformation")
                        .HasColumnType("text");

                    b.Property<double>("Piece")
                        .HasColumnType("double precision");

                    b.Property<int>("ProcessType")
                        .HasColumnType("integer");

                    b.Property<string>("ProductionCode")
                        .HasColumnType("text");

                    b.Property<int?>("QualityId")
                        .HasColumnType("integer");

                    b.Property<int>("QualityOperationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QualityId");

                    b.HasIndex("QualityOperationId");

                    b.ToTable("QualityInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<int>("QualityId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserApprovingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserLiableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QualityId");

                    b.HasIndex("UserLiableId");

                    b.ToTable("QualityOperation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RestCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RestCause");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RouteInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Operation")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<string>("RouteStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkCentreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkCentreId");

                    b.ToTable("RouteInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.ToTable("SetupVerification");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NewPanelId")
                        .HasColumnType("integer");

                    b.Property<int>("OldPanelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("SetupVerificationDetailsNewId")
                        .HasColumnType("integer");

                    b.Property<int>("SetupVerificationDetailsOldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NewPanelId");

                    b.HasIndex("OldPanelId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("SetupVerificationDetailsNewId");

                    b.HasIndex("SetupVerificationDetailsOldId");

                    b.ToTable("SetupVerificationDChange");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BomKitInfoId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangingBomKitInfoId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<double?>("FinishingQuantity")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MachineId")
                        .HasColumnType("integer");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("PartyNumber")
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("RollerQuantity")
                        .HasColumnType("double precision");

                    b.Property<int>("SetNo")
                        .HasColumnType("integer");

                    b.Property<int>("SetupVerificationId")
                        .HasColumnType("integer");

                    b.Property<int>("SiraNo")
                        .HasColumnType("integer");

                    b.Property<bool?>("State")
                        .HasColumnType("boolean");

                    b.Property<double?>("UsingQuantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BomKitInfoId");

                    b.HasIndex("MachineId");

                    b.HasIndex("SetupVerificationId");

                    b.ToTable("SetupVerificationDetails");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int?>("BomKitInfoId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Decrease")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerificated")
                        .HasColumnType("boolean");

                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<double?>("RollerQuantity")
                        .HasColumnType("double precision");

                    b.Property<int>("SetNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BomKitInfoId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.ToTable("SetupVerificationInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WareHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WareHouse");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkCentre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1485), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "DEPO"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1491), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "SMT DZG"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1492), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "THT DZG"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1494), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "KLT"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2023, 2, 12, 12, 1, 10, 418, DateTimeKind.Unspecified).AddTicks(1496), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "KMYSL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("techiz.Domain.Auth.User", null)
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("techiz.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("techiz.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("techiz.Domain.Entities.BomKitInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("BomKitInfo")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.WareHouse", "WareHouse")
                        .WithMany("BomKitInfo")
                        .HasForeignKey("WareHouseId");

                    b.Navigation("Production");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Machine", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Line", "Line")
                        .WithMany("Machine")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Menu", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("techiz.Domain.Entities.MenuPermission", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu");

                    b.HasOne("techiz.Domain.Entities.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Permission_MenuPermission");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionLog", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("ProductionLog")
                        .HasForeignKey("MachineId");

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionLog")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("ProductionLog")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionMachineMatch", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperations", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.SetupVerification", null)
                        .WithMany("ProductionOperations")
                        .HasForeignKey("SetupVerificationId");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperationsTimeLog", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.ProductionOperations", "ProductionOperations")
                        .WithMany()
                        .HasForeignKey("ProductionOperationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("ProductionOperations");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionTimeProcess", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("ProductionTimeProcess")
                        .HasForeignKey("MachineId");

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionTimeProcess")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.RestCause", "RestCause")
                        .WithMany("ProductionTimeProcess")
                        .HasForeignKey("RestCauseId");

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Production");

                    b.Navigation("RestCause");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUser", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionUser")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("ProductionUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUserRelation", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("ProductionUserRelation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Quality", null)
                        .WithMany("QualityInfo")
                        .HasForeignKey("QualityId");

                    b.HasOne("techiz.Domain.Entities.QualityOperation", "QualityOperation")
                        .WithMany()
                        .HasForeignKey("QualityOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QualityOperation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityOperation", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Quality", "Quality")
                        .WithMany("QualityOperation")
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", null)
                        .WithMany("QualityOperations")
                        .HasForeignKey("UserLiableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RouteInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("RouteInfo")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("techiz.Domain.Entities.WorkCentre", "WorkCentre")
                        .WithMany("RouteInfo")
                        .HasForeignKey("WorkCentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");

                    b.Navigation("WorkCentre");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerification", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("SetupVerification")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("SetupVerification")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDChange", b =>
                {
                    b.HasOne("techiz.Domain.Entities.ProductionOperations", "NewPanel")
                        .WithMany()
                        .HasForeignKey("NewPanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.ProductionOperations", "OldPanel")
                        .WithMany()
                        .HasForeignKey("OldPanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("SetupVerificationDChange")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.SetupVerificationDetails", "SetupVerificationDetailsNew")
                        .WithMany()
                        .HasForeignKey("SetupVerificationDetailsNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.SetupVerificationDetails", "SetupVerificationDetailsOld")
                        .WithMany()
                        .HasForeignKey("SetupVerificationDetailsOldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SetupVerificationDChange_SetupVerificationDetails_SetupVer~1");

                    b.Navigation("NewPanel");

                    b.Navigation("OldPanel");

                    b.Navigation("Production");

                    b.Navigation("SetupVerificationDetailsNew");

                    b.Navigation("SetupVerificationDetailsOld");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDetails", b =>
                {
                    b.HasOne("techiz.Domain.Entities.BomKitInfo", "BomKitInfo")
                        .WithMany("SetupVerificationDetails")
                        .HasForeignKey("BomKitInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("SetupVerificationDetails")
                        .HasForeignKey("MachineId");

                    b.HasOne("techiz.Domain.Entities.SetupVerification", "SetupVerification")
                        .WithMany("SetupVerificationDetails")
                        .HasForeignKey("SetupVerificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BomKitInfo");

                    b.Navigation("Machine");

                    b.Navigation("SetupVerification");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.BomKitInfo", "BomKitInfo")
                        .WithMany("SetupVerificationInfo")
                        .HasForeignKey("BomKitInfoId");

                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("SetupVerificationInfo")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("SetupVerificationInfo")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BomKitInfo");

                    b.Navigation("Machine");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("techiz.Domain.Auth.User", b =>
                {
                    b.Navigation("ProductionLog");

                    b.Navigation("ProductionUser");

                    b.Navigation("ProductionUserRelation");

                    b.Navigation("QualityOperations");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("techiz.Domain.Entities.BomKitInfo", b =>
                {
                    b.Navigation("SetupVerificationDetails");

                    b.Navigation("SetupVerificationInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Line", b =>
                {
                    b.Navigation("Machine");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Machine", b =>
                {
                    b.Navigation("ProductionLog");

                    b.Navigation("ProductionTimeProcess");

                    b.Navigation("SetupVerification");

                    b.Navigation("SetupVerificationDetails");

                    b.Navigation("SetupVerificationInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Production", b =>
                {
                    b.Navigation("BomKitInfo");

                    b.Navigation("ProductionLog");

                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionTimeProcess");

                    b.Navigation("ProductionUser");

                    b.Navigation("RouteInfo");

                    b.Navigation("SetupVerification");

                    b.Navigation("SetupVerificationDChange");

                    b.Navigation("SetupVerificationInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Quality", b =>
                {
                    b.Navigation("QualityInfo");

                    b.Navigation("QualityOperation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RestCause", b =>
                {
                    b.Navigation("ProductionTimeProcess");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerification", b =>
                {
                    b.Navigation("ProductionOperations");

                    b.Navigation("SetupVerificationDetails");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WareHouse", b =>
                {
                    b.Navigation("BomKitInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkCentre", b =>
                {
                    b.Navigation("RouteInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
