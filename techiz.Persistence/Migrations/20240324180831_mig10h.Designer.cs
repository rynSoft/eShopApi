// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using techiz.Persistence;

#nullable disable

namespace techiz.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20240324180831_mig10h")]
    partial class mig10h
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "2cb2d718-671c-494b-88a2-8e0611bee5e9",
                            ConcurrencyStamp = "2cb9b9ff-c9d8-4c8d-9d57-8428c667c74e",
                            Name = "sistemadmin",
                            NormalizedName = "SİSTEMADMİN"
                        },
                        new
                        {
                            Id = "16da560d-55bc-41f5-b481-34d98fa5b8b5",
                            ConcurrencyStamp = "b8c8fe41-fa7d-4adc-a8cd-b384d930b72b",
                            Name = "admin",
                            NormalizedName = "ADMİN"
                        },
                        new
                        {
                            Id = "f42bec45-e6a4-40aa-8f00-f7048e78b625",
                            ConcurrencyStamp = "9761e400-2569-4107-b950-51f1e36f410f",
                            Name = "depo",
                            NormalizedName = "DEPO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("techiz.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("techiz.Domain.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Eposta")
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b58b35b-60f7-4a52-95dd-12d435794a0e"),
                            AccessFailedCount = 0,
                            Ad = "Hakan",
                            ConcurrencyStamp = "6d4ab198-fe0a-4c8c-8102-848d40769e5f",
                            Email = "hakan@.com",
                            EmailConfirmed = false,
                            Eposta = "hakan@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "YILDIRIM",
                            TwoFactorEnabled = false,
                            UserName = "hakanyildirim"
                        },
                        new
                        {
                            Id = new Guid("599cb9c7-e9a7-4d13-b25d-dcc03221551a"),
                            AccessFailedCount = 0,
                            Ad = "Tolga",
                            ConcurrencyStamp = "0d323c95-7624-49a8-aaff-9ba77340018b",
                            Email = "tolga@.com",
                            EmailConfirmed = true,
                            Eposta = "tolga@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Bagin",
                            TwoFactorEnabled = false,
                            UserName = "Tolga"
                        },
                        new
                        {
                            Id = new Guid("4fb3b41c-1291-487f-ac3b-a1e9e877d5e3"),
                            AccessFailedCount = 0,
                            Ad = "Salih",
                            ConcurrencyStamp = "8a8e257c-58a7-4328-b00e-5975ed22c783",
                            Email = "salih@.com",
                            EmailConfirmed = true,
                            Eposta = "salih@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Dürüs",
                            TwoFactorEnabled = false,
                            UserName = "Salih"
                        },
                        new
                        {
                            Id = new Guid("f5f5fb8c-f2aa-4555-b78f-6c63057afee3"),
                            AccessFailedCount = 0,
                            Ad = "Cagan",
                            ConcurrencyStamp = "e5b60041-2040-459c-986b-feca1260cbc4",
                            Email = "cagan@.com",
                            EmailConfirmed = true,
                            Eposta = "cagan@.com",
                            IsActive = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            Soyad = "Turhan",
                            TwoFactorEnabled = false,
                            UserName = "cagan"
                        });
                });

            modelBuilder.Entity("techiz.Domain.Entities.BomKitInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("IsKitPreperated")
                        .HasColumnType("integer");

                    b.Property<int>("IsKitProvided")
                        .HasColumnType("integer");

                    b.Property<bool>("IsProductionProcess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSetupVerification")
                        .HasColumnType("boolean");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("PartyNumber")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("RollerQuantity")
                        .HasColumnType("double precision");

                    b.Property<int?>("SetNo")
                        .HasColumnType("integer");

                    b.Property<string>("SoureProductPlace")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<int?>("WareHouseId")
                        .HasColumnType("integer");

                    b.Property<string>("WareHouseName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("WareHouseId");

                    b.ToTable("BomKitInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAdress")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Port")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BarcodeReaderId")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("InputCameraId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LedNumber")
                        .HasColumnType("integer");

                    b.Property<int>("LineId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("OutputCameraId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InputCameraId");

                    b.HasIndex("LineId");

                    b.HasIndex("OutputCameraId");

                    b.ToTable("Machine");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("integer");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(7366), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "pi pi-fw pi-globe",
                            IsDeleted = false,
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(7412), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "fa fa-gavel",
                            IsDeleted = false,
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(7415), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "fa fa-balance-scale",
                            IsDeleted = false,
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(7417), new TimeSpan(0, 3, 0, 0, 0)),
                            Icon = "pi pi-fw pi-id-card",
                            IsDeleted = false,
                            Label = "Tanımlar",
                            RouteLink = "/tanimlar"
                        });
                });

            modelBuilder.Entity("techiz.Domain.Entities.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("techiz.Domain.Entities.NonComplianceCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NonComplianceCode");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(7857), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(8213), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Bandı"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(8531), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Etiketleme"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(8882), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Display Montajı"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(9195), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Programlama"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(9506), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Panelden Ayırma"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 560, DateTimeKind.Unspecified).AddTicks(9831), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Test"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(140), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite Süreçler"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(596), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite Onaylar"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(1137), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite Operasyonlar"
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(1459), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Depo Tanımları"
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(1803), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Hat Tanımları"
                        },
                        new
                        {
                            Id = 13,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(2115), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Makine Tanımları"
                        },
                        new
                        {
                            Id = 14,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(2424), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Vardiya Tanımları"
                        },
                        new
                        {
                            Id = 15,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(2733), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Oee Gösterim"
                        },
                        new
                        {
                            Id = 16,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(3058), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Vardiya - Hat Hedef Miktar Tanımları"
                        },
                        new
                        {
                            Id = 17,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(3368), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Mola Tanımları"
                        },
                        new
                        {
                            Id = 18,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(3750), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Tamamlanan Kalite Operasyonları"
                        },
                        new
                        {
                            Id = 19,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(4065), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama"
                        },
                        new
                        {
                            Id = 20,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(4376), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama Görüntüle"
                        },
                        new
                        {
                            Id = 21,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(4684), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama Kaydet"
                        },
                        new
                        {
                            Id = 22,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(5000), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Üretim Planlama Sil"
                        },
                        new
                        {
                            Id = 23,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(5309), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kit Hazırlama"
                        },
                        new
                        {
                            Id = 24,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(5617), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kit Doğrulama"
                        },
                        new
                        {
                            Id = 25,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(5957), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Setup Verification"
                        },
                        new
                        {
                            Id = 26,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(6278), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Ayarlar"
                        },
                        new
                        {
                            Id = 27,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(6673), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Credential"
                        },
                        new
                        {
                            Id = 28,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(6981), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kalite"
                        },
                        new
                        {
                            Id = 29,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(7292), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Dashboard"
                        },
                        new
                        {
                            Id = 30,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(7603), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rol Görüntüle"
                        },
                        new
                        {
                            Id = 31,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(7913), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rol Kaydet"
                        },
                        new
                        {
                            Id = 32,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(8249), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Rol Sil"
                        },
                        new
                        {
                            Id = 33,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(8560), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı Görüntüle"
                        },
                        new
                        {
                            Id = 34,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(8871), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı Kaydet"
                        },
                        new
                        {
                            Id = 35,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(9180), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "Kullanıcı Sil"
                        },
                        new
                        {
                            Id = 36,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(9534), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "KullaniciGrup All"
                        },
                        new
                        {
                            Id = 37,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 561, DateTimeKind.Unspecified).AddTicks(9843), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "LogAll"
                        });
                });

            modelBuilder.Entity("techiz.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentWPRId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<string>("Qrcode")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("WorkProcessRouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkProcessRouteId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductHistories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("BeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Explination")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkProcessRouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkProcessRouteId");

                    b.ToTable("ProductHistories");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("EstimatedTime")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<int?>("PanelCardCount")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UretimAdi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MachineId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("WorkProcessRouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkProcessRouteId");

                    b.ToTable("ProductionLog");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionMachineMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<int?>("ElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("State")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.ToTable("ProductionMachineMatch");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FeedlerData")
                        .HasColumnType("jsonb");

                    b.Property<int>("GecenSure")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OperationProcess")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<string>("QrCode")
                        .HasColumnType("text");

                    b.Property<int?>("SetupVerificationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShiftTargetParametersId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("SetupVerificationId");

                    b.HasIndex("ShiftTargetParametersId");

                    b.ToTable("ProductionOperations");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperationsTimeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LastTime")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionOperationsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProductionOperationsId");

                    b.ToTable("ProductionOperationsTimeLog");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionProcessManual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DetachFromPanelBeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DetachFromPanelElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DetachFromPanelEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DetachFromPanelUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("DisplayAssemblyBeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DisplayAssemblyElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DisplayAssemblyEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayAssemblyLotNo")
                        .HasColumnType("text");

                    b.Property<Guid?>("DisplayUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LabelingBeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LabelingElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LabelingEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LabelingUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ProgrammingBeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProgrammingElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("ProgrammingEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProgrammingUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("QrCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DetachFromPanelUserId");

                    b.HasIndex("DisplayUserId");

                    b.HasIndex("LabelingUserId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProgrammingUserId");

                    b.ToTable("ProductionProcessManual");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionProcessManualTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductionOperationsId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<string>("QrCode")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TestBeginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TestElapsedTime")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("TestEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TestUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("ProductionOperationsId");

                    b.HasIndex("TestUserId");

                    b.ToTable("ProductionProcessManualTest");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionTimeProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("ElapsedTime")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionTimeStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("RestCauseId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShiftTargetParametersId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("RestCauseId");

                    b.HasIndex("ShiftTargetParametersId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionTimeProcess");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<bool>("OpenState")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUserRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductionUserRelation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Quality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NonComplianceCode")
                        .HasColumnType("text");

                    b.Property<double>("Piece")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductionCode")
                        .HasColumnType("text");

                    b.Property<int>("QualityType")
                        .HasColumnType("integer");

                    b.Property<string>("SerialCode")
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<string>("WorkOrderNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quality");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LotInformation")
                        .HasColumnType("text");

                    b.Property<double>("Piece")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductionCode")
                        .HasColumnType("text");

                    b.Property<int>("QualityId")
                        .HasColumnType("integer");

                    b.Property<int>("QualityOperationId")
                        .HasColumnType("integer");

                    b.Property<int>("QualityProcessType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QualityId");

                    b.HasIndex("QualityOperationId");

                    b.ToTable("QualityInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AuthorizedPersonId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("EndOperation")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("EndOperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Operation")
                        .HasColumnType("text");

                    b.Property<int>("QualityId")
                        .HasColumnType("integer");

                    b.Property<bool>("StartOperation")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("StartOperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserApprovingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserLiableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizedPersonId");

                    b.HasIndex("QualityId");

                    b.ToTable("QualityOperation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityOperationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<string>("DataType")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("QualityOperationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QualityOperationId");

                    b.ToTable("QualityOperationDocument");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<bool>("OpenState")
                        .HasColumnType("boolean");

                    b.Property<int>("QualityId")
                        .HasColumnType("integer");

                    b.Property<int>("QualityProcess")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QualityId");

                    b.HasIndex("UserId");

                    b.ToTable("QualityUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RestCause", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Hanging")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("UseOee")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("RestCause");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RouteInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Operation")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionProcess")
                        .HasColumnType("integer");

                    b.Property<string>("RouteStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkCentreId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkCentreId");

                    b.ToTable("RouteInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RouteInfoUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("RouteInfoId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RouteInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("RouteInfoUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.ToTable("SetupVerification");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("NewPanelId")
                        .HasColumnType("integer");

                    b.Property<double?>("NewPanelQty")
                        .HasColumnType("double precision");

                    b.Property<int>("OldPanelId")
                        .HasColumnType("integer");

                    b.Property<double?>("OldPanelQty")
                        .HasColumnType("double precision");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<int>("SetupVerificationDetailsNewId")
                        .HasColumnType("integer");

                    b.Property<int>("SetupVerificationDetailsOldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.HasIndex("NewPanelId");

                    b.HasIndex("OldPanelId");

                    b.HasIndex("ProductionId");

                    b.HasIndex("SetupVerificationDetailsNewId");

                    b.HasIndex("SetupVerificationDetailsOldId");

                    b.ToTable("SetupVerificationDChange");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("BomKitInfoId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangingBomKitInfoId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<double?>("FinishingQuantity")
                        .HasColumnType("double precision");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MachineId")
                        .HasColumnType("integer");

                    b.Property<string>("Material")
                        .HasColumnType("text");

                    b.Property<string>("PartyNumber")
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double?>("RollerQuantity")
                        .HasColumnType("double precision");

                    b.Property<int>("SetNo")
                        .HasColumnType("integer");

                    b.Property<int>("SetupVerificationId")
                        .HasColumnType("integer");

                    b.Property<int>("SiraNo")
                        .HasColumnType("integer");

                    b.Property<bool?>("State")
                        .HasColumnType("boolean");

                    b.Property<double?>("UsingQuantity")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BomKitInfoId");

                    b.HasIndex("MachineId");

                    b.HasIndex("SetupVerificationId");

                    b.ToTable("SetupVerificationDetails");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<int?>("BomKitInfoId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Decrease")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerificated")
                        .HasColumnType("boolean");

                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<int>("MachineId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<double?>("RollerQuantity")
                        .HasColumnType("double precision");

                    b.Property<int>("SetNo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BomKitInfoId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductionId");

                    b.ToTable("SetupVerificationInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ShiftDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("EndDate")
                        .HasColumnType("interval");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("StartDate")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("ShiftDefinition");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ShiftDefinitionProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LineId")
                        .HasColumnType("integer");

                    b.Property<int>("ShiftDefinitionId")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("TeoricSpeed")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ShiftDefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("ShiftDefinitionProcess");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ShiftTargetParameters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<int>("DelayTime")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("DifferanceDate")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int>("LineId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfCard")
                        .HasColumnType("integer");

                    b.Property<int?>("RestCauseId")
                        .HasColumnType("integer");

                    b.Property<int>("ShiftDefinitionId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TargetCardCount")
                        .HasColumnType("integer");

                    b.Property<double>("TheoreticalSpeed")
                        .HasColumnType("double precision");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("RestCauseId");

                    b.HasIndex("ShiftDefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("ShiftTargetParameters");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Viewsa", b =>
                {
                    b.Property<string>("Break")
                        .HasColumnType("text");

                    b.Property<string>("Dates")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("EndDate")
                        .HasColumnType("interval");

                    b.Property<int>("Ids")
                        .HasColumnType("integer");

                    b.Property<double?>("LoadingLevel")
                        .HasColumnType("double precision");

                    b.Property<double>("Oee")
                        .HasColumnType("double precision");

                    b.Property<string>("OrderNo")
                        .HasColumnType("text");

                    b.Property<double?>("PerformanceLevel")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProductionTarget")
                        .HasColumnType("integer");

                    b.Property<int?>("QualityLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("ShiftTarget")
                        .HasColumnType("integer");

                    b.Property<int?>("SolidCardCount")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("StartDate")
                        .HasColumnType("interval");

                    b.Property<string>("SumStartWork")
                        .HasColumnType("text");

                    b.Property<string>("SumStartWorkNoCountable")
                        .HasColumnType("text");

                    b.Property<string>("SumStopWork")
                        .HasColumnType("text");

                    b.Property<double?>("TheoricSpeed")
                        .HasColumnType("double precision");

                    b.Property<double?>("UseAbleMinute")
                        .HasColumnType("double precision");

                    b.Property<string>("UseAbleTime")
                        .HasColumnType("text");

                    b.ToTable("MY_Viewsa", (string)null);
                });

            modelBuilder.Entity("techiz.Domain.Entities.WareHouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WareHouse");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkCentre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 562, DateTimeKind.Unspecified).AddTicks(244), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "DEPO"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 562, DateTimeKind.Unspecified).AddTicks(258), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "SMT DZG"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 562, DateTimeKind.Unspecified).AddTicks(260), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "THT DZG"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 562, DateTimeKind.Unspecified).AddTicks(262), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "KLT"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreateDate = new DateTimeOffset(new DateTime(2024, 3, 24, 21, 8, 30, 562, DateTimeKind.Unspecified).AddTicks(264), new TimeSpan(0, 3, 0, 0, 0)),
                            IsDeleted = false,
                            Name = "KMYSL"
                        });
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OtherObjects")
                        .HasColumnType("jsonb");

                    b.Property<int>("ProductionId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uuid");

                    b.Property<bool>("State")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VirtualName")
                        .HasColumnType("text");

                    b.Property<int>("WorkProcessTemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkProcessTemplateId");

                    b.ToTable("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessRouteTimeHistories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan>("ElapsedTime")
                        .HasColumnType("interval");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("RestCauseId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShiftTargetParametersId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkProcessRouteId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkProcessRouteTimeStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RestCauseId");

                    b.HasIndex("ShiftTargetParametersId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkProcessRouteId");

                    b.ToTable("WorkProcessRouteTimeHistories");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessRouteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkProcessRouteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkProcessRouteId");

                    b.ToTable("WorkProcessRouteUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EditorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.Property<string>("WhichPage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkProcessTemplate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("techiz.Domain.Auth.User", null)
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("techiz.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("techiz.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("techiz.Domain.Entities.BomKitInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("BomKitInfo")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.WareHouse", "WareHouse")
                        .WithMany("BomKitInfo")
                        .HasForeignKey("WareHouseId");

                    b.Navigation("Production");

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Machine", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Camera", "InputCamera")
                        .WithMany()
                        .HasForeignKey("InputCameraId");

                    b.HasOne("techiz.Domain.Entities.Line", "Line")
                        .WithMany("Machine")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Camera", "OutputCamera")
                        .WithMany()
                        .HasForeignKey("OutputCameraId");

                    b.Navigation("InputCamera");

                    b.Navigation("Line");

                    b.Navigation("OutputCamera");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Menu", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("techiz.Domain.Entities.MenuPermission", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu");

                    b.HasOne("techiz.Domain.Entities.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Permission_MenuPermission");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Product", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("Product")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId");

                    b.HasOne("techiz.Domain.Entities.WorkProcessRoute", "WorkProcessRoute")
                        .WithMany("Product")
                        .HasForeignKey("WorkProcessRouteId");

                    b.Navigation("Production");

                    b.Navigation("User");

                    b.Navigation("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductHistories", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Product", "Product")
                        .WithMany("ProductionInputHistories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("techiz.Domain.Entities.WorkProcessRoute", "WorkProcessRoute")
                        .WithMany()
                        .HasForeignKey("WorkProcessRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");

                    b.Navigation("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionLog", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", null)
                        .WithMany("ProductionLog")
                        .HasForeignKey("MachineId");

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionLog")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("ProductionLog")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.WorkProcessRoute", "WorkProcessRoute")
                        .WithMany()
                        .HasForeignKey("WorkProcessRouteId");

                    b.Navigation("Production");

                    b.Navigation("User");

                    b.Navigation("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionMachineMatch", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperations", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.SetupVerification", null)
                        .WithMany("ProductionOperations")
                        .HasForeignKey("SetupVerificationId");

                    b.HasOne("techiz.Domain.Entities.ShiftTargetParameters", "ShiftTargetParameters")
                        .WithMany("ProductionOperations")
                        .HasForeignKey("ShiftTargetParametersId");

                    b.Navigation("Machine");

                    b.Navigation("Production");

                    b.Navigation("ShiftTargetParameters");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperationsTimeLog", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.ProductionOperations", "ProductionOperations")
                        .WithMany()
                        .HasForeignKey("ProductionOperationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("ProductionOperations");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionProcessManual", b =>
                {
                    b.HasOne("techiz.Domain.Auth.User", "DetachFromPanelUser")
                        .WithMany()
                        .HasForeignKey("DetachFromPanelUserId");

                    b.HasOne("techiz.Domain.Auth.User", "DisplayUser")
                        .WithMany()
                        .HasForeignKey("DisplayUserId");

                    b.HasOne("techiz.Domain.Auth.User", "LabelingUser")
                        .WithMany()
                        .HasForeignKey("LabelingUserId");

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionProcessManual")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "ProgrammingUser")
                        .WithMany()
                        .HasForeignKey("ProgrammingUserId");

                    b.Navigation("DetachFromPanelUser");

                    b.Navigation("DisplayUser");

                    b.Navigation("LabelingUser");

                    b.Navigation("Production");

                    b.Navigation("ProgrammingUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionProcessManualTest", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionProcessManualTest")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.ProductionOperations", "ProductionOperations")
                        .WithMany("ProductionProcessManualTest")
                        .HasForeignKey("ProductionOperationsId");

                    b.HasOne("techiz.Domain.Auth.User", "TestUser")
                        .WithMany("ProductionProcessManualTest")
                        .HasForeignKey("TestUserId");

                    b.Navigation("Production");

                    b.Navigation("ProductionOperations");

                    b.Navigation("TestUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionTimeProcess", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("ProductionTimeProcess")
                        .HasForeignKey("MachineId");

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionTimeProcess")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.RestCause", "RestCause")
                        .WithMany("ProductionTimeProcess")
                        .HasForeignKey("RestCauseId");

                    b.HasOne("techiz.Domain.Entities.ShiftTargetParameters", "ShiftTargetParameters")
                        .WithMany("ProductionTimeProcess")
                        .HasForeignKey("ShiftTargetParametersId");

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Production");

                    b.Navigation("RestCause");

                    b.Navigation("ShiftTargetParameters");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUser", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("ProductionUser")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("ProductionUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionUserRelation", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("ProductionUserRelation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Quality", "Quality")
                        .WithMany()
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.QualityOperation", "QualityOperation")
                        .WithMany()
                        .HasForeignKey("QualityOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quality");

                    b.Navigation("QualityOperation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityOperation", b =>
                {
                    b.HasOne("techiz.Domain.Auth.User", null)
                        .WithMany("QualityOperations")
                        .HasForeignKey("AuthorizedPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Quality", "Quality")
                        .WithMany()
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quality");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityOperationDocument", b =>
                {
                    b.HasOne("techiz.Domain.Entities.QualityOperation", "QualityOperation")
                        .WithMany()
                        .HasForeignKey("QualityOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QualityOperation");
                });

            modelBuilder.Entity("techiz.Domain.Entities.QualityUser", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Quality", "Quality")
                        .WithMany()
                        .HasForeignKey("QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RouteInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("RouteInfo")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("techiz.Domain.Entities.WorkCentre", "WorkCentre")
                        .WithMany("RouteInfo")
                        .HasForeignKey("WorkCentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("User");

                    b.Navigation("WorkCentre");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RouteInfoUser", b =>
                {
                    b.HasOne("techiz.Domain.Entities.RouteInfo", "RouteInfo")
                        .WithMany("RouteInfoUser")
                        .HasForeignKey("RouteInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("RouteInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerification", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("SetupVerification")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("SetupVerification")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDChange", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("SetupVerificationDChange")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.ProductionOperations", "NewPanel")
                        .WithMany()
                        .HasForeignKey("NewPanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.ProductionOperations", "OldPanel")
                        .WithMany()
                        .HasForeignKey("OldPanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("SetupVerificationDChange")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.SetupVerificationDetails", "SetupVerificationDetailsNew")
                        .WithMany()
                        .HasForeignKey("SetupVerificationDetailsNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.SetupVerificationDetails", "SetupVerificationDetailsOld")
                        .WithMany()
                        .HasForeignKey("SetupVerificationDetailsOldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SetupVerificationDChange_SetupVerificationDetails_SetupVer~1");

                    b.Navigation("Machine");

                    b.Navigation("NewPanel");

                    b.Navigation("OldPanel");

                    b.Navigation("Production");

                    b.Navigation("SetupVerificationDetailsNew");

                    b.Navigation("SetupVerificationDetailsOld");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationDetails", b =>
                {
                    b.HasOne("techiz.Domain.Entities.BomKitInfo", "BomKitInfo")
                        .WithMany("SetupVerificationDetails")
                        .HasForeignKey("BomKitInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("SetupVerificationDetails")
                        .HasForeignKey("MachineId");

                    b.HasOne("techiz.Domain.Entities.SetupVerification", "SetupVerification")
                        .WithMany("SetupVerificationDetails")
                        .HasForeignKey("SetupVerificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BomKitInfo");

                    b.Navigation("Machine");

                    b.Navigation("SetupVerification");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerificationInfo", b =>
                {
                    b.HasOne("techiz.Domain.Entities.BomKitInfo", "BomKitInfo")
                        .WithMany("SetupVerificationInfo")
                        .HasForeignKey("BomKitInfoId");

                    b.HasOne("techiz.Domain.Entities.Machine", "Machine")
                        .WithMany("SetupVerificationInfo")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("SetupVerificationInfo")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BomKitInfo");

                    b.Navigation("Machine");

                    b.Navigation("Production");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ShiftDefinitionProcess", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Line", "Line")
                        .WithMany("ShiftDefinitionProcess")
                        .HasForeignKey("LineId");

                    b.HasOne("techiz.Domain.Entities.ShiftDefinition", "ShiftDefinition")
                        .WithMany("ShiftDefinitionProcess")
                        .HasForeignKey("ShiftDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Line");

                    b.Navigation("ShiftDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ShiftTargetParameters", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Line", "Line")
                        .WithMany("ShiftTargetParameters")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.RestCause", "RestCause")
                        .WithMany("ShiftTargetParameters")
                        .HasForeignKey("RestCauseId");

                    b.HasOne("techiz.Domain.Entities.ShiftDefinition", "ShiftDefinition")
                        .WithMany("ShiftTargetParameters")
                        .HasForeignKey("ShiftDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany("ShiftTargetParameters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("RestCause");

                    b.Navigation("ShiftDefinition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessRoute", b =>
                {
                    b.HasOne("techiz.Domain.Entities.Production", "Production")
                        .WithMany("WorkProcessRoute")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Auth.User", null)
                        .WithMany("WorkProcessRoute")
                        .HasForeignKey("UserId");

                    b.HasOne("techiz.Domain.Entities.WorkProcessTemplate", "WorkProcessTemplate")
                        .WithMany("WorkProcessRoute")
                        .HasForeignKey("WorkProcessTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("WorkProcessTemplate");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessRouteTimeHistories", b =>
                {
                    b.HasOne("techiz.Domain.Entities.RestCause", "RestCause")
                        .WithMany("WorkProcessRouteTimeHistories")
                        .HasForeignKey("RestCauseId");

                    b.HasOne("techiz.Domain.Entities.ShiftTargetParameters", "ShiftTargetParameters")
                        .WithMany("WorkProcessRouteTimeHistories")
                        .HasForeignKey("ShiftTargetParametersId");

                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("techiz.Domain.Entities.WorkProcessRoute", "WorkProcessRoute")
                        .WithMany("WorkProcessRouteTimeHistories")
                        .HasForeignKey("WorkProcessRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RestCause");

                    b.Navigation("ShiftTargetParameters");

                    b.Navigation("User");

                    b.Navigation("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessRouteUser", b =>
                {
                    b.HasOne("techiz.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("techiz.Domain.Entities.WorkProcessRoute", "WorkProcessRoute")
                        .WithMany("WorkProcessRouteUser")
                        .HasForeignKey("WorkProcessRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Auth.User", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("ProductionLog");

                    b.Navigation("ProductionProcessManualTest");

                    b.Navigation("ProductionUser");

                    b.Navigation("ProductionUserRelation");

                    b.Navigation("QualityOperations");

                    b.Navigation("RefreshTokens");

                    b.Navigation("ShiftTargetParameters");

                    b.Navigation("UserRole");

                    b.Navigation("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Entities.BomKitInfo", b =>
                {
                    b.Navigation("SetupVerificationDetails");

                    b.Navigation("SetupVerificationInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Line", b =>
                {
                    b.Navigation("Machine");

                    b.Navigation("ShiftDefinitionProcess");

                    b.Navigation("ShiftTargetParameters");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Machine", b =>
                {
                    b.Navigation("ProductionLog");

                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionTimeProcess");

                    b.Navigation("SetupVerification");

                    b.Navigation("SetupVerificationDChange");

                    b.Navigation("SetupVerificationDetails");

                    b.Navigation("SetupVerificationInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductionInputHistories");
                });

            modelBuilder.Entity("techiz.Domain.Entities.Production", b =>
                {
                    b.Navigation("BomKitInfo");

                    b.Navigation("Product");

                    b.Navigation("ProductionLog");

                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionProcessManual");

                    b.Navigation("ProductionProcessManualTest");

                    b.Navigation("ProductionTimeProcess");

                    b.Navigation("ProductionUser");

                    b.Navigation("RouteInfo");

                    b.Navigation("SetupVerification");

                    b.Navigation("SetupVerificationDChange");

                    b.Navigation("SetupVerificationInfo");

                    b.Navigation("WorkProcessRoute");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ProductionOperations", b =>
                {
                    b.Navigation("ProductionProcessManualTest");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RestCause", b =>
                {
                    b.Navigation("ProductionTimeProcess");

                    b.Navigation("ShiftTargetParameters");

                    b.Navigation("WorkProcessRouteTimeHistories");
                });

            modelBuilder.Entity("techiz.Domain.Entities.RouteInfo", b =>
                {
                    b.Navigation("RouteInfoUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.SetupVerification", b =>
                {
                    b.Navigation("ProductionOperations");

                    b.Navigation("SetupVerificationDetails");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ShiftDefinition", b =>
                {
                    b.Navigation("ShiftDefinitionProcess");

                    b.Navigation("ShiftTargetParameters");
                });

            modelBuilder.Entity("techiz.Domain.Entities.ShiftTargetParameters", b =>
                {
                    b.Navigation("ProductionOperations");

                    b.Navigation("ProductionTimeProcess");

                    b.Navigation("WorkProcessRouteTimeHistories");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WareHouse", b =>
                {
                    b.Navigation("BomKitInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkCentre", b =>
                {
                    b.Navigation("RouteInfo");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessRoute", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("WorkProcessRouteTimeHistories");

                    b.Navigation("WorkProcessRouteUser");
                });

            modelBuilder.Entity("techiz.Domain.Entities.WorkProcessTemplate", b =>
                {
                    b.Navigation("WorkProcessRoute");
                });
#pragma warning restore 612, 618
        }
    }
}
